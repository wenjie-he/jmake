#!/bin/bash
set -o errexit

CXX="g++"
ARC="ar"
CODEBASE="/home/lianjin/codebase/"
TEMP="/home/lianjin/BUILD_TEMP/"
OUTPUT="/home/lianjin/BUILD_OUTPUT/"

PYTHON="python3"

declare -A build_done_map
declare -A building_map
declare -A repo_done_map
declare -A INC_map
repo_url=`git remote -v | grep fetch | awk -F " " '{print $2}'`
repo_branch=`git symbolic-ref --short -q HEAD`
jmake_path=`dirname $0`
build_done_list=()

############################### build single module #################################
WORKSPACE=""
TYPE=""
SRCS=""
COPT=""
REPO=""
MODULE=""
HDRS=""

LINK=""

function find_ele_in_list {
    ele=$1
    list=$2
}

function build_module {
    THIS_TEMP=$TEMP$REPO
    THIS_OUTPUT=$OUTPUT$REPO
    THIS_CODEBASE=$CODEBASE$REPO

    INC=""
    echo "before building inc map keys : "${!INC_map[@]}
    for key in ${!INC_map[@]}; do
	INC+=" -I "$key
    done

    echo "include path : "$INC

    declare -A object_dir
    declare -A header_dir
    res_change=false
    object_list=""
    for s in ${SRCS[@]}; do
        src=$WORKSPACE$s
        object_file=${THIS_TEMP}${src}".o"
        object_list+=" "$object_file
        depend_file=${THIS_TEMP}${src}".d"
	src_dir=${src%/*}
	if [ -z ${object_dir[$src_dir]} ]; then
	    if [ ! -d $THIS_TEMP"${src_dir}" ]; then
		mkdir -p $THIS_TEMP$src_dir
	    fi
	    object_dir[$src_dir]="exsit"
	fi
	if [ ! -f "${object_file}" ]; then
    	    res_change=true
    	    $CXX -o ${object_file} -c $THIS_CODEBASE${src} $COPT $INC
        else
    	    if [ ! -f $depend_file ]; then
                $CXX -MM $THIS_CODEBASE${src} $INC > $depend_file
	    else
	        depend_file_time=`stat -c %Y ${depend_file}`
	        # depend file exsit, whever we should rebuild it
	        headers=`awk -F ":" '{print $2}' $depend_file | sed 's/\\\\/ /g'`
	        depend_file_change=false
	        for h in ${headers[@]}; do
	            if [ ! -f $h ]; then
		        depend_file_change=true
		        break
		    fi
		    header_file_time=`stat -c %Y $h`
		    if [ $header_file_time -gt $depend_file_time ]; then
		        depend_file_change=true
		        break
		    fi
		done
	    	if [ $depend_file_change = true ]; then
	            $CXX -MM $THIS_CODEBASE${src} $INC > $depend_file
	    	fi
	    fi
    	    headers=`awk -F ":" '{print $2}' $depend_file | sed 's/\\\\/ /g'`
	    object_file_change=false
	    object_file_time=`stat -c %Y ${object_file}`
	    for h in ${headers[@]}; do
 		header_file_time=`stat -c %Y $h`
                if [ $header_file_time -gt $object_file_time ]; then
                    $CXX -o ${object_file} -c $THIS_CODEBASE${src} $COPT $INC
	            res_change=true
	        fi
            done
	fi
    done

    if [ ! -d $THIS_OUTPUT"bin/" ]; then
	mkdir -p $THIS_OUTPUT"bin/"
    fi
    if [ ! -d $THIS_OUTPUT"lib/" ]; then
	mkdir -p $THIS_OUTPUT"lib/"
    fi
    if [ ! -d $THIS_OUTPUT"include/" ]; then
	mkdir -p $THIS_OUTPUT"include/"
    fi
    if [ $res_change ]; then
    	if [ "$TYPE" == "static" ]; then
	    $ARC -r $THIS_OUTPUT"lib/""lib"$MODULE".a" $object_list
    	elif [ "$TYPE" == "shared" ]; then
            $CXX -shared -o $THIS_OUTPUT"lib/""lib"$MODULE".so" $object_list $COPT $LINK
        else
	    echo $object_list $module $COPT $LINK
            $CXX -o $THIS_OUTPUT"bin/"$MODULE $object_list $COPT $LINK
	    echo "finished"
        fi
    fi

    for h in ${HDRS[@]}; do
	hdr_dir=`dirname $h`
	if [ -z ${header_dir[$hdr_dir]} ]; then
	    if [ ! -d $THIS_OUTPUT$hdr_dir ]; then
	        mkdir -p $THIS_OUTPUT"include/"$hdr_dir
	    fi
	    header_dir[$hdr_dir]="exsit"
	fi
	
        cp $THIS_CODEBASE$WORKSPACE$h $THIS_OUTPUT"include/"
    done
    return 0
}
############################# repo pull  ###############################
temp_repo_dir=""
function repo_pull {
    repo_url=$1
    branch=$2
    if [ -n "${repo_done_map[$repo_url" "$branch]}" ]; then
	return 0
    fi
 
    local_dir=`echo $repo_url | awk -F ':' '{print $2}'| awk -F ".git" '{print $1}'`"/"
    temp_local_dir="/home/lianjin/codebase/"$local_dir
    if [ ! -d $temp_local_dir ];then
	git clone -b $branch $repo_url $temp_local_dir
    else
	current_branch=`cd $temp_local_dir && git symbolic-ref --short -q HEAD`
	if [ "$current_branch" != "$branch" ]; then
            branch_repo_dir=$temp_local_dir"_"$branch
	    cd $temp_local_dir && git fetch origin $branch:$branch
	    if [ ! -d $branch_repo_dir ];then
                git clone -b $branch $temp_local_dir $branch_repo_dir
            fi
	    cd $branch_repo_dir && git fetch origin $branch
	    temp_local_dir=$branch_repo_dir
	fi
    fi
    temp_repo_dir=$local_dir
    repo_done_map[$repo_url" "$branch]="done"

    return 0
}

############################## sub module  ###############################
temp_dep_type=""
link_dirs=""
function sub_module {
    repo=$1
    module=$2
    
    if [ -n "${build_done_map[$repo" "$module]}" ]; then
	echo "repo module has been builded, repo : "$repo", module : "$module
	return 0
    fi

    depend_list=`$PYTHON $jmake_path"/python_scripts/get_local_depend_list.py" $repo $module`
    echo "$depend_list" | while read d
    do
	if [ -z "$d" ]; then
            continue
	fi
	repo_dir=`echo $d | awk -F ' ' '{print $1}'`
	dep_module=`echo $d | awk -F ' ' '{print $2}'`
	sub_module $repo_dir $dep_module
    done

    depend_list=`$PYTHON $jmake_path"/python_scripts/get_repo_depend_list.py" $repo $module`
    echo "$depend_list" | while read d
    do
	if [ -z "$d" ]; then
	    continue
	fi
	repo_url=`echo $d | awk -F " " '{print $1}'`
	repo_dir=`echo $repo_url | awk -F ':' '{print $1}' | awk -F ".git" '{print $1}'`
	branch=`echo $d | awk -F " " '{print $2}'`
	dep_module=`echo $d | awk -F " " '{print $3}'`
	repo_pull "$repo_url" "$branch"
	sub_module $temp_repo_dir $dep_module
    done

    OLD_IFS=$IFS
    IFS=$'\n'
    module_info="`$PYTHON $jmake_path"/python_scripts/get_module_info.py" $repo $module`"
    #echo "module_info : "$module_info
    HDRS=""
    for m in ${module_info[@]};do
    	key=`echo $m | sed 's/--\(.*\)="\(.*\)"/\1/g'`
	#echo "key : "$key
    	value=`echo $m | sed 's/--\(.*\)="\(.*\)"/\2/g'`
	#echo "value : ""$value"
	if [ "$key" == "WORKSPACE" ]; then
            WORKSPACE=$value
	elif [ "$key" == "TYPE" ]; then
	    TYPE=$value
	elif [ "$key" == "SRCS" ]; then
	    SRCS=$value
	elif [ "$key" == "COPT" ]; then
            COPT=$value
	elif [ "$key" == "MODULE" ]; then
	    MODULE=$value
	elif [ "$key" == "HDRS" ]; then
            HDRS=$value
	elif [ "$key" == "error" ]; then
	    echo "parse "$repo" "$module" error : "$value
	    return 1
	fi
    done
    IFS=$OLD_IFS
    REPO=$repo
    #echo "show build done map : "${build_done_map[$repo" "$module]}
    
    echo "building module, repo : "$repo", module : "$module
    build_module
    build_done_map[$repo" "$module]="done"

    INC_map["$temp_repo_dir"]="exsit "
    echo "after building inc map keys : "${!INC_map[@]}
    if [[ "$TYPE" == "static" || "$TYPE" == "shared" ]]; then
    	LINK+=" -L"$OUTPUT$temp_repo_dir"lib/ -l"$module
    fi
    return 0
}


#################################### main entry ########################################

local_dir=`echo $repo_url | awk -F ':' '{print $2}'| awk -F ".git" '{print $1}'`"/"
temp_repo_dir=$local_dir
module_list=()
if [ $# -eq 0 ]; then
    module_list=`$PYTHON $jmake_path"/python_scripts/get_all_module.py" $local_dir`
else
    for param in "$*"; do
        module_list+=param
    done
fi
#echo $repo_url
#echo $local_dir
#echo $module_list
for m in ${module_list[@]}; do
    sub_module $local_dir  $m
done
